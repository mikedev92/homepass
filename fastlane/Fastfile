require 'dotenv'

# Check Git Status
lane :check_git_status do |options|
  ensure_git_branch(
    branch: "#{options[:name]}"
  )
  ensure_git_status_clean
  git_pull

end

before_all do |lane, options|
  Dotenv.load(".env.#{ENV['ENV']}.secret")
end

# IOS

platform :ios do
  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :setup do |options|
    produce(
      app_name: ENV['IOS_APP_NAME']
    )
    match(
        type: 'development',
        shallow_clone: true,
        force_for_new_devices: true
    )
    match(
      shallow_clone: true,
      force_for_new_devices: true
    )
  end

  lane :build do |options|
    plist_full_path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    backup_file(path: plist_full_path)
    xcodeproj = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcodeproj"
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    update_app_identifier(
        xcodeproj: xcodeproj,
        app_identifier: ENV["IOS_APP_ID"],
        plist_path: ENV['IOS_PLIST_PATH']
    )
    increment_build_number(
        build_number: latest_testflight_build_number + 1,
        xcodeproj: xcodeproj
    )
    update_info_plist(
      xcodeproj: xcodeproj,
      plist_path: ENV['IOS_PLIST_PATH'],
      block: lambda { |plist|
        plist['CodePushDeploymentKey'] = ENV['CODE_PUSH_KEY']
        plist['CFBundleIdentifier'] = ENV['IOS_APP_ID']
        plist['CFBundleName'] = ENV['IOS_APP_NAME']
        plist['CFBundleDisplayName'] = ENV['IOS_APP_NAME']
        plist['CFBundleShortVersionString'] = ENV['IOS_VERSION']
      },
    )
    profile_env_name = "sigh_#{ENV['IOS_APP_ID']}_#{ENV['MATCH_TYPE']}_profile-name"
    gymOptions = ({
      silent: true,
      xcargs: "PROVISIONING_PROFILE_SPECIFIER='#{ENV[profile_env_name]}' DEVELOPMENT_TEAM='#{ENV['IOS_TEAM_ID']}'"
    }).merge(
      File.directory?("../#{xcworkspace}") ?
        {workspace: xcworkspace} :
        {project: xcodeproj}
    )
    gym(gymOptions)
    restore_file(path: plist_full_path)
  end

  lane :release do |options|
    setup
    build
    pilot(
        distribute_external: false,
        skip_waiting_for_build_processing: true
    )
  end
end

platform :android do
  lane :build do |options|
    gradle(
      task: "assembleRelease",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :release do |options|
    build
    supply
  end
end
